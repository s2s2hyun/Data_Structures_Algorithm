// 선택 정렬 - selection sort

// 선택 정렬도 버블 정렬처럼 이해와 구현이 간단하지만 ,성능이 아쉬운 단점을 가지고 있습니다. 그럼 선택 정렬은 어떻게 정렬을 진행하는지 알아보자 !

// ex) [6,3,4,1,2,5]

// 선택 정렬은 배열의 정렬되지 않은 영역의 첫 번째 원소를 시작으로 마지막 원소까지 비교 후 가장 작은 값을 첫 번째 원소로 가져옵니다.

// ex) [6,3,4,1,2,5] -> [1,3,4,6,2,5]

// 1은 정렬된 영역 3,4,6,2,5 정렬되지 않은 영역

// 그 다음도 정렬되지 않은 영역의 첫 번째 원소를 시작으로 마지막 원소까지 비교후 가장 작은 값을 첫번째 원소로 가져옵니다.

// [1,2,4,6,3,5]

// 1,2 은 정렬된 영역 / 4,6,3,5 정렬 되지않은 영역

// 이와 같은 계속 같은 작업을 해줍니다.

// 또 다른 ex)

// [4,2,1,3]

// 정렬되지 않은 영역

// 정렬되지 않은 영역의 첫 번째 원소인 4부터 시작해 마지막 원소인 3까지 비교하며 가장 작은 값을 찾습니다.

// 현재 가장 작은 값 4 , 4와 2를 비교합니다 . 현재 가장 작은 값을 4보다 작은 2로 가장 작은 값을 2로 업데이트 해줍니다.

// 이제 2와 1을 비교합니다. 현재 가장 작은 값인 2보다 1이 더 작으므로 가장 작은 값을 1로 업데이트 해줍니다. 이제 1과 3을 비교합니다.

// 현재 가장 작은 값인 1보다 3보다 작지 않으므로 가장 작은값은 업데이트 하지않습니다. 배열의 끝에 도달해서 비교대상이 이제 없습니다 . 현재 가장 작은 값인 1과 정렬되지 않은ㅇ 영역의 첫 번째 원소인 4의 자리를 바꿉니다.

// [1,2,4,3]

// 이렇게 되면 1은 정리가 된것입니다.

// 2,3,4 정렬되지 않은 영역 1개가 줄었습니다.

// 방금 했던 작업을 똑같이 진행을 또 해보겠습니다.

// 정렬 되지 않은 영역인 첫번째 가장 작은값 2 부터 다시 해보겠습니다. 현재 가장 작은 값인 2보다 4보다 작지 않으므로 업데이트 하지 않습니다. 그 이후 2,3을 비교하면 현재 가장 작은 값은 2이며 자리를 바꾸지 않습니다.정렬 되지 않은 배열의 첫 번째로 이동시키려는데 첫 번째 원소가 이미 2입니다. 따라서 따로 위치변동을 안합니다.

// 정렬되지않은 영역 첫 번째 원소인 4가 가장 작은 값입니다.

// 4와 3을 비교했을때 4가 3보다 크기에 3이 가장 작은값으로 업데이트 해줍니다. 비교대상이 없으므로 4와 3을 자리를 바꿔주며

// 정렬되지않은 영역은 4 한개 남아서 비교대상이 없어 정렬이 끝났습니다 .

// [1,2,3,4]
