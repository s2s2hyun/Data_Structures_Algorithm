// 동적 프로그래밍 - 타뷸레이션

// 분할 정복을 하기 위해서 하향식 계산 방식인 메모이제이션에 대해서 공부했습니다.

// 메모이제이션의 장점은 재귀적인 기법으로 어려운 문제를 단순히 풀 수 있고 , 계산 결과를 해시 테이블에 저장하고 재사용하기 때문에 속도도 빠르다는 것입니다.

// 하지만 메모이제이션도 결국 함수를 여러 번 호출하는 재귀를 사용하기 때문에 함수 하나를 호출하는 것 보다 오버헤드가 더 클수밖에 없습니다.

// 이번시간 타뷸레이션

// 상향식 계산 방식으로 계산에 필요하지 않을 수도 있는 값도 미리 계산해 테이블에 저장해 둡니다.

// 그리고 이렇게 계산되어 저장된 값을 필요할 때 사용해 빠르게 계산합니다.

// 이전에 시간에 구현했던 피보나치 수열을 하향식이 아닌 상향식으로 구현해보겠습니다.

// //
// 그럼 동적 프로그래밍이 필요한 분할 정복문제를 풀때 메모이제이션과
// 타뷸레이션은 어떤 것이 더 좋은 접근방식일까요 ?

// 상황에 따라 다르다.

// 메모이제이션은 재귀를 이용해 문제를 하향식으로 해결합니다.

// 재귀를 이용하면 복잡한 문제를 쉽게 해결할수 있는 장점이 있습니다. 재귀만 이용한다면 중복 계산을 하기 때문에 성능의 문제가 발생했는데,계산 결과를 저장하는 방식으로 단점을 해결했습니다.

// 메모이제이션은 해결하기 힘든 문제를 하향식으로 접근하고 더 많은 메모리를 사용하여 성능을 향상 시킵니다.

// 이러한 이유로 분할 정복을 해결할 때 재귀가 더 직관적이라면

// 메모이제이션을 이용하는게 더 유리합니다. 하지만 어떤 문제는 재귀가 직관적이지 않을수 있습니다. 그럴 땐 상향식 접근인 타뷸레이션을 이용해 메모리도 절약하고 속도도 빠르게 해결할 수 있습니다.
