function hanoi(count, from, to, temp) {
    // #3
    if (count == 0) return;
    // #2
    hanoi(count - 1, from, temp, to);
    console.log(`원반 ${count}를 ${from} 에서 ${to}로 이동`);
    hanoi(count - 1, temp, to, from);
}

hanoi(3, "A", "C", "B");

// hanoi(원반의 갯수 n , "A"= 시작(from)은 기둥 A에서 ,
// "C"= 목표(to) 는 기둥 C이고 ,
// "B" = 임시 (temp)로 기둥 B를 이용)

// #1. 하향식 계산방식으로 접근
// #2. 우리는 기둥 A에 원반 세 개가 꽂혀 있다고 생각하고 코드를 작성하고 있습니다.
// 카운트가 3 기둥 A,C로 이동
// 원반 1,2 가 기둥 B에 위치해야
// 원반 3이 기둥 C로 이동가능 !
// #3. 기저 조건을 넣어줘야한다 .  함수 가장 위에 넣어주겠다.
// 기저 조건은 원반이 없을 때로 옮길 원반이 없다면 함수를 종료하면 됩니다.

// #4. 기저 조건을 넣고 node 를 실행해보자
// 출력값
// 원반 1를 A 에서 C로 이동
// 원반 2를 A 에서 B로 이동
// 원반 1를 C 에서 B로 이동
// 원반 3를 A 에서 C로 이동
// 원반 1를 B 에서 A로 이동
// 원반 2를 B 에서 C로 이동
// 원반 1를 A 에서 C로 이동
