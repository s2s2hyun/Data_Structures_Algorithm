// 정렬 - 버블 정렬

// 배열에 무작위로 섞인 숫자를 정렬하는 방법에 대해서 알아보자!

// 연결리스트로도 정렬을 할수있지만 배열이 훨신 이해하기 쉽다.

// 버블 정렬 : 버블정렬은 가장 쉽게 생각할수있는 정렬중 하나입니다. 따라서 구현하기도 쉽지만 , 성능은 그닥 좋지 못합니다. 버블 정렬이 어떤것인지 그림으로 알아보자 .

// bubble_sort.mjs 파일 생성후 이동해서 해봅시다.

// 구현은 그만큼 단순한대 성능은 그다지 엄청 좋지는 못합니다. 우리는 길이 n 배열에서 반복문을 한번 거칠 때 마다 마지막 원소가 정렬되는 것을 확인했습니다. 바깥쪽 for문이 반복될때 마다 정렬 되지 않은 원소 중에 가장 큰 원소가 정렬되고 안쪽 for문은 반복 횟수가 점점 줄어듭니다. 원소가 하나씩 정렬 될 수록 정렬되지 않은 원소들은 줄어들기 때문이죠

// 이렇게 원소가 한개 남을 때 까지 반복하는데 이를 수학식으로 풀어쓰면 이런 모습을 하게 됩니다.

// 버블정렬의 장단점
// 장점- 가장쉽게 생각 할 수있는 정렬방법으로 이해 구현이 간단하다.

// 연결리스트로도 정렬을 할수있지만 배열이 훨신 이해하기 쉽다.

// 버블 정렬 : 버블정렬은 가장 쉽게 생각할수있는 정렬중 하나입니다. 따라서 구현하기도 쉽지만 , 성능은 그닥 좋지 못합니다. 버블 정렬이 어떤것인지 그림으로 알아보자 .

// 단점 - 성능이 O(n제곱) 으로 별로 좋지 않다는 것
// - 중요한 시스템을 만들때는 비추천이다.

// 수학적으로 정확하게 계산하는게 복잡할수도 느껴질수 있습니다 . 포기하지말고 핵심계산에서 for문 두개가 중첩되어 있으니 대략 O(n제곱) 이 나오겠구나

// 빅오의 목적은 정확도 보다는 데이터가 늘어날 때 계산이 늘어나는 척도만 보는 용도이기 때문에 이렇게 판단해도 무리가 없습니다 .
